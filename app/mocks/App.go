// Copyright 2021 Northern.tech AS
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// Code generated by mockery v2.2.2. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/mendersoftware/deviceconfig/model"
	mock "github.com/stretchr/testify/mock"
)

// App is an autogenerated mock type for the App type
type App struct {
	mock.Mock
}

// AreDevicesInGroup provides a mock function with given fields: ctx, devices, group
func (_m *App) AreDevicesInGroup(ctx context.Context, devices []string, group string) (bool, error) {
	ret := _m.Called(ctx, devices, group)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, []string, string) bool); ok {
		r0 = rf(ctx, devices, group)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []string, string) error); ok {
		r1 = rf(ctx, devices, group)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DecommissionDevice provides a mock function with given fields: ctx, devID
func (_m *App) DecommissionDevice(ctx context.Context, devID string) error {
	ret := _m.Called(ctx, devID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, devID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeployConfiguration provides a mock function with given fields: ctx, device, request
func (_m *App) DeployConfiguration(ctx context.Context, device model.Device, request model.DeployConfigurationRequest) (model.DeployConfigurationResponse, error) {
	ret := _m.Called(ctx, device, request)

	var r0 model.DeployConfigurationResponse
	if rf, ok := ret.Get(0).(func(context.Context, model.Device, model.DeployConfigurationRequest) model.DeployConfigurationResponse); ok {
		r0 = rf(ctx, device, request)
	} else {
		r0 = ret.Get(0).(model.DeployConfigurationResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.Device, model.DeployConfigurationRequest) error); ok {
		r1 = rf(ctx, device, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDevice provides a mock function with given fields: ctx, devID
func (_m *App) GetDevice(ctx context.Context, devID string) (model.Device, error) {
	ret := _m.Called(ctx, devID)

	var r0 model.Device
	if rf, ok := ret.Get(0).(func(context.Context, string) model.Device); ok {
		r0 = rf(ctx, devID)
	} else {
		r0 = ret.Get(0).(model.Device)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, devID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HealthCheck provides a mock function with given fields: ctx
func (_m *App) HealthCheck(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProvisionDevice provides a mock function with given fields: ctx, dev
func (_m *App) ProvisionDevice(ctx context.Context, dev model.NewDevice) error {
	ret := _m.Called(ctx, dev)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.NewDevice) error); ok {
		r0 = rf(ctx, dev)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProvisionTenant provides a mock function with given fields: ctx, tenant
func (_m *App) ProvisionTenant(ctx context.Context, tenant model.NewTenant) error {
	ret := _m.Called(ctx, tenant)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.NewTenant) error); ok {
		r0 = rf(ctx, tenant)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetConfiguration provides a mock function with given fields: ctx, devID, configuration
func (_m *App) SetConfiguration(ctx context.Context, devID string, configuration model.Attributes) error {
	ret := _m.Called(ctx, devID, configuration)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, model.Attributes) error); ok {
		r0 = rf(ctx, devID, configuration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetReportedConfiguration provides a mock function with given fields: ctx, devID, configuration
func (_m *App) SetReportedConfiguration(ctx context.Context, devID string, configuration model.Attributes) error {
	ret := _m.Called(ctx, devID, configuration)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, model.Attributes) error); ok {
		r0 = rf(ctx, devID, configuration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateConfiguration provides a mock function with given fields: ctx, devID, attrs
func (_m *App) UpdateConfiguration(ctx context.Context, devID string, attrs model.Attributes) error {
	ret := _m.Called(ctx, devID, attrs)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, model.Attributes) error); ok {
		r0 = rf(ctx, devID, attrs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
